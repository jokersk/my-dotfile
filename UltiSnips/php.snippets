snippet pub
public function $1() {
	$2
}
endsnippet

snippet ppub
protected function $1() {
	$2
}
endsnippet

snippet test
/** @test */
public function $1() {
	$2
}
endsnippet

snippet fac
$1::factory()->create();
endsnippet

snippet this
$this->
endsnippet

snippet eq
$this->assertEquals($1);
endsnippet

snippet at
$this->assertTrue($1);
endsnippet

snippet try
try {

} catch (\Exception $e) {

}
endsnippet

snippet div
<div>

</div>
endsnippet

snippet con 
public function __construct() {

}
endsnippet

snippet class 
<?php

class $1 {

}
endsnippet

snippet "(.*).re" "return" r
return `!p snip.rv = match.group(1)`;
endsnippet

snippet "(.*).class" "create class" r
<?php
namespace `!p snip.rv = "\\".join([ (item[0].upper() + item[1:]) for item in match.group(1).split("/")[:-1]]) `;

class `!p
snip.rv = snip.basename
` {
	$1
}
endsnippet

snippet "(.*).ns" "namespace" r
namespace `!p snip.rv = "\\".join([(item[0].upper() + item[1:]) for item in match.group(1).split("/")[:-1]]) `$1;
endsnippet

snippet cam "camelcase"
`!p
result = "".join([ (item[0].upper() + item[1:]) for item in snip.v.text.split('_') ])
result = result[0].lower() + result[1:]
snip.rv = result
`
endsnippet

snippet fn "function"
function () {
	$1
}
endsnippet

snippet p "protected" "re.match('[\(]', snip.buffer[snip.line][snip.column-1])" ie
protected $1
endsnippet

snippet lg 
console.log($1)
endsnippet

